"""
Django settings for doctor_desk project.

Generated by 'django-admin startproject' using Django 5.1.1.

For more information on this file, see
https://docs.djangoproject.com/en/5.1/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/5.1/ref/settings/
"""

from pathlib import Path
import os
from dotenv import load_dotenv 

# Load environment variables from .env file
load_dotenv()

# Build paths inside the project like this: BASE_DIR / 'subdir'.
BASE_DIR = Path(__file__).resolve().parent.parent


# Quick-start development settings - unsuitable for production
# See https://docs.djangoproject.com/en/5.1/howto/deployment/checklist/

# SECURITY WARNING: keep the secret key used in production secret!
SECRET_KEY = os.getenv('SECRET_KEY')


# SECURITY WARNING: don't run with debug turned on in production!
DEBUG = os.getenv('DEBUG')

ALLOWED_HOSTS = ['https://doctor-desk-eight.vercel.app/', 'doctor-desk-eight.vercel.app', 'localhost', '127.0.0.1']


# Application definition

INSTALLED_APPS = [
    'django.contrib.admin',
    'django.contrib.auth',
    'django.contrib.contenttypes',
    'django.contrib.sessions',
    'django.contrib.messages',
    'django.contrib.staticfiles',
    'patients',  # Custom app for managing patients
    'doctors',   # Custom app for managing doctors
    'widget_tweaks', # For form tweaks in templates
    'crispy_forms', # For better form rendering
    'crispy_bootstrap5', # For Bootstrap 5 support in crispy_forms
    'storages', # For handling static and media files in cloud storage
]


CRISPY_ALLOWED_TEMPLATE_PACKS = "bootstrap5" # This allows using Bootstrap 5 with crispy_forms
CRISPY_TEMPLATE_PACK = "bootstrap5" # This sets the default template pack for crispy_forms


MIDDLEWARE = [
    'django.middleware.security.SecurityMiddleware',
    'whitenoise.middleware.WhiteNoiseMiddleware',
    'django.contrib.sessions.middleware.SessionMiddleware',
    'django.middleware.common.CommonMiddleware',
    'django.middleware.csrf.CsrfViewMiddleware',
    'django.contrib.auth.middleware.AuthenticationMiddleware',
    'django.contrib.messages.middleware.MessageMiddleware',
    'django.middleware.clickjacking.XFrameOptionsMiddleware',
]

ROOT_URLCONF = 'doctor_desk.urls'

TEMPLATES = [
    {
        'BACKEND': 'django.template.backends.django.DjangoTemplates',
        'DIRS': [os.path.join(BASE_DIR, 'templates')],  # Directory for custom templates
        'APP_DIRS': True,
        'OPTIONS': {
            'context_processors': [
                'django.template.context_processors.debug',
                'django.template.context_processors.request',
                'django.contrib.auth.context_processors.auth',
                'django.contrib.messages.context_processors.messages',
            ],
        },
    },
]

WSGI_APPLICATION = 'doctor_desk.wsgi.application'


# Database
# https://docs.djangoproject.com/en/5.1/ref/settings/#databases

DATABASES = {
    'default': {
        'ENGINE': 'django.db.backends.postgresql',
        'NAME': os.getenv('DB_NAME'),  # Database name
        'USER': os.getenv('DB_USER'),  # Database user
        'PASSWORD': os.getenv('DB_PASSWORD'),  # Database password
        'HOST': os.getenv('DB_HOST', 'localhost'),  # Database host, default is localhost
        'PORT': os.getenv('DB_PORT', '5432'),  # Database port, default is 5432
    }
}


# Password validation
# https://docs.djangoproject.com/en/5.1/ref/settings/#auth-password-validators

AUTH_PASSWORD_VALIDATORS = [
    {
        'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator',
    },
]


# Internationalization
# https://docs.djangoproject.com/en/5.1/topics/i18n/

LANGUAGE_CODE = 'en-us'

TIME_ZONE = 'UTC'

USE_I18N = True

USE_TZ = True


# Static files (CSS, JavaScript, Images)
# https://docs.djangoproject.com/en/5.1/howto/static-files/

STATIC_URL = 'static/'
# Render-এ staticfiles serve করার জন্য প্রয়োজনীয় config
STATICFILES_DIRS = [os.path.join(BASE_DIR, 'static')]  # যেখানে custom static files থাকে
STATIC_ROOT = os.path.join(BASE_DIR, 'staticfiles')    # collectstatic এখানে static files জমা রাখবে

# Whitenoise staticfiles handler
STATICFILES_STORAGE = 'whitenoise.storage.CompressedManifestStaticFilesStorage'

# Default primary key field type
# https://docs.djangoproject.com/en/5.1/ref/settings/#default-auto-field

DEFAULT_AUTO_FIELD = 'django.db.models.BigAutoField'

# Media files (for file uploads)
MEDIA_URL = '/media/'
MEDIA_ROOT = os.path.join(BASE_DIR, 'media')

DEFAULT_FILE_STORAGE = 'storages.backends.s3boto3.S3Boto3Storage'

# Supabase-compatible config (uses S3 protocol under the hood)
AWS_ACCESS_KEY_ID = 'eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpc3MiOiJzdXBhYmFzZSIsInJlZiI6Imt3ZXh3aGRnZ3hsbGJrZXJ5a2xrIiwicm9sZSI6ImFub24iLCJpYXQiOjE3NDk0MDYxMDIsImV4cCI6MjA2NDk4MjEwMn0.LxFNH-mXnCTuboCC6IUuTjKAPrSI7AzZFeAmX41lce0' # Supabase public anon key
AWS_SECRET_ACCESS_KEY = 'eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpc3MiOiJzdXBhYmFzZSIsInJlZiI6Imt3ZXh3aGRnZ3hsbGJrZXJ5a2xrIiwicm9sZSI6InNlcnZpY2Vfcm9sZSIsImlhdCI6MTc0OTQwNjEwMiwiZXhwIjoyMDY0OTgyMTAyfQ.C_Ni2gEa_NGZlnSkakdvASVEzlwdBcjzRxeVCQw2NMA' # Supabase service role key
AWS_STORAGE_BUCKET_NAME = 'reports' # Supabase bucket name
AWS_S3_ENDPOINT_URL = 'https://kwexwhdggxllbkeryklk.supabase.co/storage/buckets/reports' # Supabase storage endpoint URL
AWS_S3_FILE_OVERWRITE = False
AWS_DEFAULT_ACL = None